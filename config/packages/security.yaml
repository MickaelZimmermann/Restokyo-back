security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\User:
            algorithm: auto
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # users_in_memory: { memory: null }

        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: 'email'
    firewalls:
        # intercepts API road
        login:
            pattern: ^/api/v1/login
            stateless: true
            json_login:
                check_path: /api/v1/login_check # or api_login_check as defined in config/routes.yaml
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        # manage API roads
        api:
            pattern:   ^/api/v1
            stateless: true
            jwt: ~
            #guard:
                # authenticators:
                    # - lexik_jwt_authentication.jwt_token_authenticator

        # dev road
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider # users_in_memory

            # json_login:
            #     # api_login is a route we will create below
            #     check_path: api_login
            #     username_path: email
            #     password_path: password

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            form_login:
                # "login" is the name of the route created previously
                login_path: login
                check_path: login
                default_target_path: menu
                

            logout:
                # Correspond au nom de la route, name="logout"
                path: logout
                # where to redirect after logout
                target: login

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:

        # Front : If ROLE_USER : add comment on an establishement.
        - { path: ^/etablissements/^[a-z0-9]+(?:-[a-z0-9]+)*$/commentaires/ajouter, roles: ROLE_USER }

        # Front : If ROLE_USER : can submit a new establishement.
        - { path: ^/etablissements/ajouter, roles: ROLE_USER }

        # Back : Secure every road to back with ROLE_ADMIN.
        - { path: ^/menu, roles: ROLE_ADMIN }
        - { path: ^/quartiers, roles: ROLE_ADMIN }
        - { path: ^/etablissement, roles: ROLE_ADMIN }
        - { path: ^/user, roles: ROLE_ADMIN }

        # API road 
        - { path: ^/api/v1/new, roles: ROLE_ADMIN, methods: POST}
        # - { path: ^/api/v1/profils, roles: ROLE_USER}

    role_hierarchy:
        # ADMIN > USER
        ROLE_ADMIN: ROLE_USER

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
